## @section Common parameters

## @param {string} kubeVersion - Override Kubernetes version
##
kubeVersion: ""

## @param {string} nameOverride - Partially override `names.fullname`
## DO NOT set nameOverride and fullnameOverride at the same time.
##
nameOverride: ""

## @param {string} fullnameOverride - Fully override `names.fullname`
## DO NOT set nameOverride and fullnameOverride at the same time.
##
fullnameOverride: ""

## @param {object} commonLabels - Labels to add to all deployed objects
## Remove the curly braces after 'commonLabels:'.
##
commonLabels: {}


## @section Prometheus SQL Exporter (sql-exporter) configuration

config:
  ## @param {boolean} config.createK8sSecretConfig
  ## Create a K8s Secret or ConfigMap for the application config
  ## If set to 'true', a K8s Secret will be created.
  ## If set to 'false', a K8s ConfigMap will be created.
  ##
  createK8sSecretConfig: true

  ## @param {string} config.scrapeTimeout
  ## Scrape timeouts ensure that:
  ##   (i)  scraping completes in reasonable time and
  ##   (ii) slow queries are canceled early when the database is already under heavy load
  ## Prometheus informs targets of its own scrape timeout (via the "X-Prometheus-Scrape-Timeout-Seconds" request header)
  ## so the actual timeout is computed as:
  ##   min(scrapeTimeout, X-Prometheus-Scrape-Timeout-Seconds - scrapeTimeoutOffset)
  ##
  ## If scrapeTimeout <= 0, no timeout is set unless Prometheus provides one.
  ## Defaults to  10s.
  ##
  scrapeTimeout: 10s

  ## @param {string} config.scrapeTimeoutOffset
  ## Subtracted from Prometheus' scrapeTimeout to give us some headroom and prevent Prometheus from timing out first.
  ## Must be strictly positive.
  ## Defaults to 500ms.
  ##
  scrapeTimeoutOffset: 500ms

  ## @param {string} config.minInterval
  ## Minimum interval between collector runs.
  ## Defaults to 0s, collectors are executed on every scrape.
  ##
  minInterval: 0s

  ## @param {integer} config.maxConnections
  ## Maximum number of open connections to any one target. Metric queries will run concurrently on multiple connections,
  ## as will concurrent scrapes.
  ## If maxConnections <= 0, then there is no limit on the number of open connections.
  ## Defaults to 3.
  ##
  maxConnections: 3

  ## @param {integer} config.maxIdleConnections
  ## Maximum number of idle connections to any one target. Unless you use very long collection intervals, this should
  ## always be the same as maxConnections.
  ## If maxIdleConnections <= 0, no idle connections are retained.
  ## Default to 3.
  ##
  maxIdleConnections: 3

  ## @param {string} config.maxConnectionLifetime
  ## Maximum amount of time a connection may be reused to any one target.
  ## Defaults to infinite, inside the application code.
  ## Suggested value is 10m.
  ##
  maxConnectionLifetime: 10m

  ## @param {string} config.dataSourceName
  ## Data source name always has a URI schema that matches the driver name. In some cases (e.g. MySQL)
  ## the schema gets dropped or replaced to match the driver expected DSN format.
  ## Can be overriden with a container environment variable, SQLEXPORTER_TARGET_DSN, using `extraEnv` (below).
  ## SQLEXPORTER_TARGET_DSN info: https://github.com/burningalchemist/sql_exporter/issues/186
  ## For additional information: https://github.com/burningalchemist/sql_exporter/#data-source-names-dsn
  ##
  dataSourceName:

  ## @param {string} config.awsSecretName
  ## AWS Secrets Manager secret
  ## For additional information: https://github.com/burningalchemist/sql_exporter/#using-aws-secrets-manager
  ##
  awsSecretName: ""

  ## @param {list} config.collectorNames
  ## Collectors (referenced by name) to execute on the target.
  ## Use the example below to create your list of collector(s).
  ##
  collectorNames:
    - pricing_data_freshness

  ## @param {list} config.collectorFiles
  ## collectorFiles are filenames that sql-exporter will look for and load.
  ## Glob patterns are supported (see <https://pkg.go.dev/path/filepath#Match> for syntax).
  ##
  collectorFiles:
    - "*.collector.yml"

  ## @param {object} config.annotations - Annotations to add to the Secret or ConfigMap
  ## Remove the curly braces after 'annotations:'.
  ##
  annotations: {}

  ## @param {object} config.labels - Labels to add to the Secret or ConfigMap
  ## Remove the curly braces after 'labels:'.
  ##
  labels: {}


## @section Image parameters

## Prometheus SQL Exporter image
## @param {string} image.repository - Prometheus SQL Exporter image repository
## @param {string} image.registry - Prometheus SQL Exporter image registry
##
image:
  ## Do NOT set an image tag after the repository, use 'tag' below.
  ##
  repository: burningalchemist/sql_exporter

  ## @param {string} image.tag - Prometheus SQL Exporter image tag (immutable tags are recommended)
  ## Override the image tag to deploy by setting this variable.
  ## If no value is set, the chart's appVersion will be used.
  ##
  tag: ""

  ## @param {string} image.pullPolicy - Prometheus SQL Exporter image pull policy
  ##
  pullPolicy: IfNotPresent

  ## @param {list} image.pullSecrets - List image pull secrets
  ## You must manually create your own secret to use this.
  ##
  pullSecrets: []


## @section Deployment parameters

## @param {integer} replicaCount - Number of sql-exporter deployment replicas
##
replicaCount: 1

## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
## @param {string} strategy.type - Deployment strategy type
## @param {object} strategy.rollingUpdate
##
strategy:
  ## StrategyType
  ## Can be set to RollingUpdate or Recreate
  ## Remove the curly braces after 'rollingUpdate:'.
  ##
  type: RollingUpdate
  rollingUpdate: {}

## Resource requests and limits
## ref: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
## @param {object} resources.requests - The requested resources for the sql-exporter container
## @param {object} resources.limits - The resources limits for the sql-exporter container
## Remove the curly braces after 'requests/limits:'.
##
resources:
  # requests: {}
  # limits: {}

## sql-exporter container liveness probe
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
## @param {boolean} livenessProbe.enabled - Enable/disable livenessProbe on sql-exporter container
## @param {integer} livenessProbe.initialDelaySeconds - Initial delay seconds for livenessProbe
## @param {integer} livenessProbe.periodSeconds - Period seconds for livenessProbe
## @param {integer} livenessProbe.timeoutSeconds - Timeout seconds for livenessProbe
## @param {integer} livenessProbe.successThreshold - Success threshold for livenessProbe
## @param {integer} livenessProbe.failureThreshold - Failure threshold for livenessProbe
##
livenessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds:
  timeoutSeconds:
  successThreshold:
  failureThreshold:

## @param {object} customLivenessProbe - Custom livenessProbe that overrides the default one
##
customLivenessProbe: {}

## sql-exporter container readiness probe
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
## @param {boolean} readinessProbe.enabled - Enable/disable readinessProbe on sql-exporter container
## @param {integer} readinessProbe.initialDelaySeconds - Initial delay seconds for readinessProbe
## @param {integer} readinessProbe.periodSeconds - Period seconds for readinessProbe
## @param {integer} readinessProbe.timeoutSeconds - Timeout seconds for readinessProbe
## @param {integer} readinessProbe.successThreshold - Success threshold for readinessProbe
## @param {integer} readinessProbe.failureThreshold - Failure threshold for readinessProbe
##
readinessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds:
  timeoutSeconds:
  successThreshold:
  failureThreshold:

## @param {object} customReadinessProbe - Custom readinessProbe that overrides the default one
##
customReadinessProbe: {}

## @param {list} extraEnv - Set additional environment variables
## Remove the square brackets after 'extraEnv:'.
## Any secrets used below must be manually created in the namespace
##
extraEnv: []
  # - name: SQLEXPORTER_TARGET_DSN
  #   value: "sqlserver://user:pass@dbserver:1433"
  # - name: SQLEXPORTER_TARGET_DSN
  #   valueFrom:
  #     secretKeyRef:
  #       key: DSN
  #       name: sql-exporter-dsn

## @param {list} extraVolumeMounts - Specify additional volume mounts
## Remove the square brackets after 'extraVolumeMounts:'.
##
extraVolumeMounts: []
  # - mountPath: /example-path
  #   name: example-volume

## @param {list} extraVolumes - Specify additional volumes
## Remove the square brackets after 'extraVolumes:'.
##
extraVolumes: []
  # - name: example-volume
  #   configMap:
  #     name: example-conf

## @param {object} annotations - Annotations to add to the Deployment
## Remove the curly braces after 'annotations:'.
##
annotations: {}

## @param {object} labels - Labels to add to the Deployment
## Remove the curly braces after 'labels:'.
##
labels: {}


## @section Service parameters

## ref: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
##
service:
  ## @param {integer} service.targetPort - Set the target port
  ##
  targetPort:

  ## ServiceType
  ## @param {string} service.type - Set the service type
  ## Can be set to ClusterIP, NodePort, or LoadBalancer
  ##
  type: ClusterIP

  ## Service Node Port
  ## @param {integer} service.nodePort - Set the node port
  ## Only usable if type is set to 'NodePort'
  ##
  nodePort:

  ## @param {object} service.annotations - Annotations to add to the service
  ## Remove the curly braces after 'service.annotations:'.
  ##
  annotations: {}

  ## @param {object} service.labels - Labels to add to the service
  ## Remove the curly braces after 'service.labels:'.
  ##
  labels: {}


## @section Collector definitions (aka Collectors)

## ref: https://github.com/burningalchemist/sql_exporter/#collectors
## ref: https://github.com/burningalchemist/sql_exporter/blob/master/documentation/sql_exporter.yml
## @param {string} collectorDefs
## A collector is a named set of related metrics that are collected together. It can be referenced by name, possibly
## along with other collectors.
## NOTE: `collectorDefs` must be a string so you have to add a | after collectorDefs:
##
collectorDefs: |
  # This collector will be referenced in the exporter configuration as `pricing_data_freshness`.
  - collector_name: pricing_data_freshness

    # A Prometheus metric with (optional) additional labels, value and labels populated from one query.
    metrics:
      - metric_name: pricing_update_time
        type: gauge
        help: 'Time when prices for a market were last updated.'
        key_labels:
          # Populated from the `market` column of each row.
          - Market
        static_labels:
          # Arbitrary key/value pair
          portfolio: income
        values: [LastUpdateTime]
        query_ref: pricing_update_time
    queries:
      - query_name: pricing_update_time
        query: |
          SELECT Market, max(UpdateTime) AS LastUpdateTime
          FROM MarketPrices
          GROUP BY Market


## @section Collector definition files

## ref: https://github.com/burningalchemist/sql_exporter/#collectors
## ref: https://github.com/burningalchemist/sql_exporter/blob/master/documentation/sql_exporter.yml
## @param {list} collectorDefFiles
## A collector is a named set of related metrics that are collected together. It can be referenced by name, possibly
## along with other collectors.
##
collectorDefFiles: []
  # pricing_data_freshness.collector.yml:
  #   collector_name: pricing_data_freshness
  #   metrics:
  #     - metric_name: mssql_hostname
  #       type: gauge
  #       help: 'Database server hostname'
  #       key_labels:
  #         # Populated from the `hostname` column of the result.
  #         - hostname
  #       # Static value, always set to `1`.
  #       static_value: 1
  #       query: |
  #         SELECT @@SERVERNAME AS hostname
